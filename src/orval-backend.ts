/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type CreateProductRESTParams = {
productCommand: CreateProductCommand;
};

export type AddProductToCategoryParams = {
productCommand: CreateProductCommand;
};

export type AddCategoryParams = {
command: CreateCategoryCommand;
};

export type ModifyCategoryByIdParams = {
modifyCategoryCommand: ModifyCategoryCommand;
};

export interface PurchaseQuery {
  user?: User;
}

export type UserAccountType = typeof UserAccountType[keyof typeof UserAccountType];


export const UserAccountType = {
  ADMIN: 'ADMIN',
  USER: 'USER',
} as const;

export interface CreatePurchaseCommand {
  user?: User;
}

export type CreateUserCommandAccountType = typeof CreateUserCommandAccountType[keyof typeof CreateUserCommandAccountType];


export const CreateUserCommandAccountType = {
  ADMIN: 'ADMIN',
  USER: 'USER',
} as const;

export interface CreateUserCommand {
  accountType?: CreateUserCommandAccountType;
  email?: string;
  login?: string;
  password?: string;
}

export type UserQueryAccountType = typeof UserQueryAccountType[keyof typeof UserQueryAccountType];



export const UserQueryAccountType = {
  ADMIN: 'ADMIN',
  USER: 'USER',
} as const;

export interface UserQuery {
  accountType?: UserQueryAccountType;
  email?: string;
  id?: number;
  login?: string;
  password?: string;
  productBin?: ProductBin;
  purchases?: Purchase[];
}

export type UpdateUserCommandAccountType = typeof UpdateUserCommandAccountType[keyof typeof UpdateUserCommandAccountType];


export const UpdateUserCommandAccountType = {
  ADMIN: 'ADMIN',
  USER: 'USER',
} as const;

export interface Category {
  id?: number;
  title?: string;
}

export interface Product {
  category?: Category;
  id?: number;
  title?: string;
}

export interface ProductBinQuery {
  items?: Product[];
}

export interface Purchase {
  id?: number;
  products?: Product[];
}

export interface ProductBin {
  id?: number;
  items?: Product[];
}

export interface User {
  accountType?: UserAccountType;
  email?: string;
  id?: number;
  login: string;
  password?: string;
  productBin?: ProductBin;
  purchases?: Purchase[];
}

export interface UpdateUserCommand {
  accountType?: UpdateUserCommandAccountType;
  email?: string;
  login?: string;
  password?: string;
  productBin?: ProductBin;
  purchases?: Purchase[];
}

export interface ProductQuery {
  category?: Category;
  id?: number;
  title?: string;
}

export interface CreateProductCommand {
  category?: Category;
  title?: string;
}

export interface CreateCategoryCommand {
  title?: string;
}

export interface ModifyCategoryCommand {
  title?: string;
}

export interface CategoryQuery {
  id?: number;
  title?: string;
}

export type ApiErrorType = typeof ApiErrorType[keyof typeof ApiErrorType];


export const ApiErrorType = {
  validation: 'validation',
  business: 'business',
  system: 'system',
} as const;

export type ApiErrorStatus = typeof ApiErrorStatus[keyof typeof ApiErrorStatus];


export const ApiErrorStatus = {
  '100_CONTINUE': '100 CONTINUE',
  '101_SWITCHING_PROTOCOLS': '101 SWITCHING_PROTOCOLS',
  '102_PROCESSING': '102 PROCESSING',
  '103_EARLY_HINTS': '103 EARLY_HINTS',
  '103_CHECKPOINT': '103 CHECKPOINT',
  '200_OK': '200 OK',
  '201_CREATED': '201 CREATED',
  '202_ACCEPTED': '202 ACCEPTED',
  '203_NON_AUTHORITATIVE_INFORMATION': '203 NON_AUTHORITATIVE_INFORMATION',
  '204_NO_CONTENT': '204 NO_CONTENT',
  '205_RESET_CONTENT': '205 RESET_CONTENT',
  '206_PARTIAL_CONTENT': '206 PARTIAL_CONTENT',
  '207_MULTI_STATUS': '207 MULTI_STATUS',
  '208_ALREADY_REPORTED': '208 ALREADY_REPORTED',
  '226_IM_USED': '226 IM_USED',
  '300_MULTIPLE_CHOICES': '300 MULTIPLE_CHOICES',
  '301_MOVED_PERMANENTLY': '301 MOVED_PERMANENTLY',
  '302_FOUND': '302 FOUND',
  '302_MOVED_TEMPORARILY': '302 MOVED_TEMPORARILY',
  '303_SEE_OTHER': '303 SEE_OTHER',
  '304_NOT_MODIFIED': '304 NOT_MODIFIED',
  '305_USE_PROXY': '305 USE_PROXY',
  '307_TEMPORARY_REDIRECT': '307 TEMPORARY_REDIRECT',
  '308_PERMANENT_REDIRECT': '308 PERMANENT_REDIRECT',
  '400_BAD_REQUEST': '400 BAD_REQUEST',
  '401_UNAUTHORIZED': '401 UNAUTHORIZED',
  '402_PAYMENT_REQUIRED': '402 PAYMENT_REQUIRED',
  '403_FORBIDDEN': '403 FORBIDDEN',
  '404_NOT_FOUND': '404 NOT_FOUND',
  '405_METHOD_NOT_ALLOWED': '405 METHOD_NOT_ALLOWED',
  '406_NOT_ACCEPTABLE': '406 NOT_ACCEPTABLE',
  '407_PROXY_AUTHENTICATION_REQUIRED': '407 PROXY_AUTHENTICATION_REQUIRED',
  '408_REQUEST_TIMEOUT': '408 REQUEST_TIMEOUT',
  '409_CONFLICT': '409 CONFLICT',
  '410_GONE': '410 GONE',
  '411_LENGTH_REQUIRED': '411 LENGTH_REQUIRED',
  '412_PRECONDITION_FAILED': '412 PRECONDITION_FAILED',
  '413_PAYLOAD_TOO_LARGE': '413 PAYLOAD_TOO_LARGE',
  '413_REQUEST_ENTITY_TOO_LARGE': '413 REQUEST_ENTITY_TOO_LARGE',
  '414_URI_TOO_LONG': '414 URI_TOO_LONG',
  '414_REQUEST_URI_TOO_LONG': '414 REQUEST_URI_TOO_LONG',
  '415_UNSUPPORTED_MEDIA_TYPE': '415 UNSUPPORTED_MEDIA_TYPE',
  '416_REQUESTED_RANGE_NOT_SATISFIABLE': '416 REQUESTED_RANGE_NOT_SATISFIABLE',
  '417_EXPECTATION_FAILED': '417 EXPECTATION_FAILED',
  '418_I_AM_A_TEAPOT': '418 I_AM_A_TEAPOT',
  '419_INSUFFICIENT_SPACE_ON_RESOURCE': '419 INSUFFICIENT_SPACE_ON_RESOURCE',
  '420_METHOD_FAILURE': '420 METHOD_FAILURE',
  '421_DESTINATION_LOCKED': '421 DESTINATION_LOCKED',
  '422_UNPROCESSABLE_ENTITY': '422 UNPROCESSABLE_ENTITY',
  '423_LOCKED': '423 LOCKED',
  '424_FAILED_DEPENDENCY': '424 FAILED_DEPENDENCY',
  '425_TOO_EARLY': '425 TOO_EARLY',
  '426_UPGRADE_REQUIRED': '426 UPGRADE_REQUIRED',
  '428_PRECONDITION_REQUIRED': '428 PRECONDITION_REQUIRED',
  '429_TOO_MANY_REQUESTS': '429 TOO_MANY_REQUESTS',
  '431_REQUEST_HEADER_FIELDS_TOO_LARGE': '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
  '451_UNAVAILABLE_FOR_LEGAL_REASONS': '451 UNAVAILABLE_FOR_LEGAL_REASONS',
  '500_INTERNAL_SERVER_ERROR': '500 INTERNAL_SERVER_ERROR',
  '501_NOT_IMPLEMENTED': '501 NOT_IMPLEMENTED',
  '502_BAD_GATEWAY': '502 BAD_GATEWAY',
  '503_SERVICE_UNAVAILABLE': '503 SERVICE_UNAVAILABLE',
  '504_GATEWAY_TIMEOUT': '504 GATEWAY_TIMEOUT',
  '505_HTTP_VERSION_NOT_SUPPORTED': '505 HTTP_VERSION_NOT_SUPPORTED',
  '506_VARIANT_ALSO_NEGOTIATES': '506 VARIANT_ALSO_NEGOTIATES',
  '507_INSUFFICIENT_STORAGE': '507 INSUFFICIENT_STORAGE',
  '508_LOOP_DETECTED': '508 LOOP_DETECTED',
  '509_BANDWIDTH_LIMIT_EXCEEDED': '509 BANDWIDTH_LIMIT_EXCEEDED',
  '510_NOT_EXTENDED': '510 NOT_EXTENDED',
  '511_NETWORK_AUTHENTICATION_REQUIRED': '511 NETWORK_AUTHENTICATION_REQUIRED',
} as const;

export interface ApiError {
  message?: string;
  status?: ApiErrorStatus;
  type?: ApiErrorType;
}





  export const getAllCategories = <TData = AxiosResponse<CategoryQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories`,options
    );
  }

export const getAllCategories1 = <TData = AxiosResponse<CategoryQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories`,undefined,options
    );
  }

export const findCategoryById = <TData = AxiosResponse<CategoryQuery>>(
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/${categoryId}`,options
    );
  }

export const findCategoryById1 = <TData = AxiosResponse<CategoryQuery>>(
    categoryId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/${categoryId}`,undefined,options
    );
  }

export const modifyCategoryById = <TData = AxiosResponse<CategoryQuery>>(
    id: number,
    params: ModifyCategoryByIdParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/modify/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const modifyCategoryById1 = <TData = AxiosResponse<CategoryQuery>>(
    id: number,
    modifyCategoryCommand: ModifyCategoryCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/modify/${id}`,
      modifyCategoryCommand,options
    );
  }

export const addCategory = <TData = AxiosResponse<CategoryQuery>>(
    params: AddCategoryParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/add`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const addCategory2 = <TData = AxiosResponse<CategoryQuery>>(
    createCategoryCommand: CreateCategoryCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/add`,
      createCategoryCommand,options
    );
  }

export const addCategory1 = <TData = AxiosResponse<CategoryQuery>>(
    createCategoryCommand: CreateCategoryCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/categories/add`,
      createCategoryCommand,options
    );
  }

export const addProductToCategory = <TData = AxiosResponse<ProductQuery>>(
    params: AddProductToCategoryParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/add-product`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const addProductToCategory2 = <TData = AxiosResponse<ProductQuery>>(
    createProductCommand: CreateProductCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/add-product`,
      createProductCommand,options
    );
  }

export const addProductToCategory1 = <TData = AxiosResponse<ProductQuery>>(
    createProductCommand: CreateProductCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/categories/add-product`,
      createProductCommand,options
    );
  }

export const getAllProductsREST = <TData = AxiosResponse<ProductQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/products/all`,options
    );
  }

export const getAllProductsREST2 = <TData = AxiosResponse<ProductQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/products/all`,undefined,options
    );
  }

export const getAllProductsREST1 = <TData = AxiosResponse<ProductQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/products/all`,undefined,options
    );
  }

export const getAllProductsREST3 = <TData = AxiosResponse<ProductQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/products/all`,options
    );
  }

export const createProductREST = <TData = AxiosResponse<ProductQuery>>(
    params: CreateProductRESTParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/products/add`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const createProductREST2 = <TData = AxiosResponse<ProductQuery>>(
    createProductCommand: CreateProductCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/products/add`,
      createProductCommand,options
    );
  }

export const createProductREST1 = <TData = AxiosResponse<ProductQuery>>(
    createProductCommand: CreateProductCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/products/add`,
      createProductCommand,options
    );
  }

export const createProductREST3 = <TData = AxiosResponse<ProductQuery>>(
    createProductCommand: CreateProductCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/products/add`,{data:
      createProductCommand, ...options}
    );
  }

export const deleteCategoryById = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/${id}`,options
    );
  }

export const deleteCategoryById1 = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/${id}`,undefined,options
    );
  }

export const deleteCategoryById2 = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/categories/${id}`,options
    );
  }

export const deleteCategoryByTitle = <TData = AxiosResponse<void>>(
    categoryTitle: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/categories/delete/${categoryTitle}`,options
    );
  }

export const deleteCategoryByTitle1 = <TData = AxiosResponse<void>>(
    categoryTitle: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/categories/delete/${categoryTitle}`,undefined,options
    );
  }

export const deleteCategoryByTitle2 = <TData = AxiosResponse<void>>(
    categoryTitle: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/categories/delete/${categoryTitle}`,options
    );
  }

export const getUserById = <TData = AxiosResponse<UserQuery>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${id}`,options
    );
  }

export const updateAUser = <TData = AxiosResponse<UserQuery>>(
    id: number,
    updateUserCommand: UpdateUserCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/${id}`,
      updateUserCommand,options
    );
  }

export const putAnItemInAProductBin = <TData = AxiosResponse<ProductBinQuery>>(
    userId: number,
    product: Product, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users/${userId}/product-bin/add`,
      product,options
    );
  }

export const postAUser = <TData = AxiosResponse<UserQuery>>(
    createUserCommand: CreateUserCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users/add`,
      createUserCommand,options
    );
  }

export const addPurchase = <TData = AxiosResponse<PurchaseQuery>>(
    createPurchaseCommand: CreatePurchaseCommand, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/purchases/add`,
      createPurchaseCommand,options
    );
  }

export const getAllUsers = <TData = AxiosResponse<UserQuery[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users`,options
    );
  }

export const getProductBinOfA = <TData = AxiosResponse<ProductBinQuery>>(
    userId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${userId}/product-bin`,options
    );
  }

export const deleteProductFromUsersProductBin = <TData = AxiosResponse<void>>(
    userId: number,
    productId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/users/${userId}/product-bin/delete/${productId}`,options
    );
  }

export const deleteAUser = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/users/delete/${id}`,options
    );
  }

export type GetAllCategoriesResult = AxiosResponse<CategoryQuery[]>
export type GetAllCategories1Result = AxiosResponse<CategoryQuery[]>
export type FindCategoryByIdResult = AxiosResponse<CategoryQuery>
export type FindCategoryById1Result = AxiosResponse<CategoryQuery>
export type ModifyCategoryByIdResult = AxiosResponse<CategoryQuery>
export type ModifyCategoryById1Result = AxiosResponse<CategoryQuery>
export type AddCategoryResult = AxiosResponse<CategoryQuery>
export type AddCategory2Result = AxiosResponse<CategoryQuery>
export type AddCategory1Result = AxiosResponse<CategoryQuery>
export type AddProductToCategoryResult = AxiosResponse<ProductQuery>
export type AddProductToCategory2Result = AxiosResponse<ProductQuery>
export type AddProductToCategory1Result = AxiosResponse<ProductQuery>
export type GetAllProductsRESTResult = AxiosResponse<ProductQuery[]>
export type GetAllProductsREST2Result = AxiosResponse<ProductQuery[]>
export type GetAllProductsREST1Result = AxiosResponse<ProductQuery[]>
export type GetAllProductsREST3Result = AxiosResponse<ProductQuery[]>
export type CreateProductRESTResult = AxiosResponse<ProductQuery>
export type CreateProductREST2Result = AxiosResponse<ProductQuery>
export type CreateProductREST1Result = AxiosResponse<ProductQuery>
export type CreateProductREST3Result = AxiosResponse<ProductQuery>
export type DeleteCategoryByIdResult = AxiosResponse<void>
export type DeleteCategoryById1Result = AxiosResponse<void>
export type DeleteCategoryById2Result = AxiosResponse<void>
export type DeleteCategoryByTitleResult = AxiosResponse<void>
export type DeleteCategoryByTitle1Result = AxiosResponse<void>
export type DeleteCategoryByTitle2Result = AxiosResponse<void>
export type GetUserByIdResult = AxiosResponse<UserQuery>
export type UpdateAUserResult = AxiosResponse<UserQuery>
export type PutAnItemInAProductBinResult = AxiosResponse<ProductBinQuery>
export type PostAUserResult = AxiosResponse<UserQuery>
export type AddPurchaseResult = AxiosResponse<PurchaseQuery>
export type GetAllUsersResult = AxiosResponse<UserQuery[]>
export type GetProductBinOfAResult = AxiosResponse<ProductBinQuery>
export type DeleteProductFromUsersProductBinResult = AxiosResponse<void>
export type DeleteAUserResult = AxiosResponse<void>
